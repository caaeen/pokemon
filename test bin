import React, { useState, useEffect } from 'react';
import Header from './header.jsx';
import Wallpaper from '../assets/images/pokemon-wallpaper.png';
import QRCode from 'react-qr-code';
import { ToastContainer, toast } from 'react-toastify';
import { useNavigate } from 'react-router-dom';

import 'react-toastify/dist/ReactToastify.css';
import Axios from 'axios';

const Battle = () => {
  const [battleId, setBattleId] = useState(null);
  const [scannedBattle, setScannedBattle] = useState(false);
  const [battleMetadata, setBattleMetadata] = useState(null);  
  const navigate = useNavigate();

  const generateQR = async () => {
    const existingBattleId = localStorage.getItem("battleId"); 
    const playerId = localStorage.getItem("playerId");
  
    if (existingBattleId) {
      try {
        await Axios.put(`http://localhost:3000/queue/${existingBattleId}`, {
          status: "canceled",  
        });
        //toast.info("Previous battle canceled!");
      } catch (err) {
        //toast.error("Failed to update the previous battle status.");
        //console.error(err);
      }
    }
    const generateUUID = () => {
      return (Date.now().toString(36) + Math.random().toString(36).substr(2, 10));
    };
    const newBattleId = generateUUID();
    localStorage.setItem("battleId", newBattleId);  
    setBattleId(newBattleId);
  
    
    const hostTeam = JSON.parse(localStorage.getItem(`team-${playerId}`)) || [];
  
    try {
      await Axios.post("http://localhost:3000/queue", {
        id: newBattleId,
        hostId: playerId,
        opponentId: null,
        status: "pending",
        createdAt: new Date().toISOString(),
        hostTeam: hostTeam,  
      });
  
      toast.success("QR Generated and battle created!");
    } catch (err) {
      toast.error("Failed to save battle to server");
      console.error(err);
    }
  };
  
  

  const qrValue = battleId
    ? `http://localhost:5173/pokedex?bid=${battleId}` 
    : '';

  const checkScannedBattleId = async () => {
    const battleId = localStorage.getItem('scannedBattleId');
  
    if (!battleId) {
      //console.warn("No scannedBattleId found in localStorage.");
      return;
    }
  
    try {
      const res = await Axios.get(`http://localhost:3000/queue/${battleId}`);
  
      if (res.status === 200) {
        //console.log("Metadata:", res.data);
        setBattleMetadata(res.data); 
        setScannedBattle(true);       
      } else {
        console.error("Battle not found.");
      }
    } catch (err) {
      if (err.response?.status === 404) {
        console.error("Battle ID not found in the server.");
      } else {
        console.error("Server error while fetching metadata.");
      }
    }
  };

  const declineBattle = async () => {
    const battleId = localStorage.getItem('scannedBattleId');
    
    if (!battleId) {
      console.error("No scannedBattleId found to decline.");
      return;
    }

    try {
      await Axios.put(`http://localhost:3000/queue/${battleId}`, {
        status: "declined", 
      });

      localStorage.removeItem('scannedBattleId');
  
      
      setScannedBattle(false);
      setBattleMetadata(null);
  
      toast.success("Battle declined.");
    } catch (err) {
      console.error("Failed to decline battle:", err);
      toast.error("Failed to decline battle.");
    }
  };

  const acceptBattle = async () => {
    const battleId = localStorage.getItem('scannedBattleId');
    const playerId = localStorage.getItem('playerId');
    
    if (!battleId || !playerId) {
      console.error("No scannedBattleId or playerId found to accept.");
      return;
    }
  
    try {
      const res = await Axios.get(`http://localhost:3000/queue/${battleId}`);
  
      if (res.status === 200) {
        const battleStatus = res.data.status;
        const hostId = res.data.hostId;
        const active_battle_id = res.data.id;
        const hostTeam = res.data.hostTeam || [];  
  
        if (battleStatus !== "pending") {
         
          localStorage.removeItem('scannedBattleId');
          toast.info("This battle is no longer available.");
        } else {
         
          const opponentTeam = JSON.parse(localStorage.getItem(`team-${playerId}`)) || [];
  
          await Axios.put(`http://localhost:3000/queue/${battleId}`, {
            status: "accepted",
            hostId: hostId,
            opponentId: playerId
          });
  
          const timestamp = new Date().toISOString();  
        

          await Axios.post('http://localhost:3000/battle', {
            id: active_battle_id,
            hostId: hostId,
            opponentId: playerId,
            hostTeam: hostTeam, 
            opponentTeam: opponentTeam,  
            timestamp: timestamp,
            status: "active", 
            winner: null,
            opponentReady: false,
            hostReady:false,
            scoredRounds: 0,
            round: [] 
          });
  
     
          localStorage.removeItem('scannedBattleId');
          localStorage.setItem('battleId', active_battle_id);
          setScannedBattle(false);
          setBattleMetadata(null);
  
          toast.success("Battle accepted!");
          
     
          navigate('/ready');
        }
      } else {
        console.error("Failed to fetch battle details.");
      }
    } catch (err) {
      console.error("Error while checking battle status:", err);
      toast.error("Failed to check battle status.");
    }
  };
  
  useEffect(() => {
    let interval;
    if (battleId) {
      interval = setInterval(async () => {
        try {
          const res = await Axios.get(`http://localhost:3000/queue/${battleId}`);
          const status = res.data.status;
  
          if (status === "accepted") {
            clearInterval(interval);
            toast.success("Opponent accepted the battle!");
            navigate("/ready");
          } else if (status === "declined") {
            clearInterval(interval);
            toast.error("Your battle request was declined.");
            localStorage.removeItem("battleId");
            setBattleId(null);
          }
        } catch (err) {
          console.error("Error checking battle status:", err);
        }
      }, 1000); 
    }
  
    return () => clearInterval(interval);
  }, [battleId]);
  
  useEffect(() => {
    checkScannedBattleId(); 
  }, []);

  return (
    <>
      <div>
        <Header isOn={false} />
        <img src={Wallpaper} alt="" className="opacity-60 fixed w-full h-full object-cover -z-10" />
        
        {/* QR Generation */}
        {!scannedBattle && !battleMetadata ? (
          <div className="w-full h-full flex flex-col pt-15 gap-5 items-center p-2">
            <p className="text-[#737373] text-center">
              This match is a <b>Player</b> vs <b>Player</b> battle simulation. Generating QR will require another player
              to scan in order to join you in the battle. <br />
              <b className="text-red-900/70 text-[13px]">
                *Do not leave this page or the battle request will be cancelled.*
              </b>
            </p>

            <div className="generatedQR sm:w-[400px] p-2 w-full min-h-[200px] border-[2px] bg-white border-[#737373] rounded flex justify-center items-center">
              {battleId ? (
                <QRCode value={qrValue} size={200} />
                
              ) : (
                <p className="text-center text-sm text-gray-400">Click "Generate QR" to create a battle</p>
              )}
            </div>
            {battleId ? (
                
                <div>{qrValue}</div>
              ) : (
                <div></div>
              )}
            <button
              onClick={generateQR}
              className="p-2 rounded cursor-pointer shadow-md text-[#737373] bg-white hover:bg-blue-700/80 hover:text-white ease-linear duration-300"
            >
              Generate QR
            </button>
          </div>
        ) : (
          <div className='grid w-full '>
            {battleMetadata ? (
              <div className='shadow-md bg-white sm:w-[70%] flex flex-col gap-2 place-self-center p-2 mt-10 rounded-md'>
                <b className='text-lg'>Battle Information</b>
                <p className='text-[#737373]'><strong>Battle ID:</strong> {battleMetadata.id}</p>
                <p className='text-[#737373]'><strong>Status:</strong> {battleMetadata.status}</p>
                <p className='text-[#737373]'><strong>Host ID:</strong> {battleMetadata.hostId}</p>
                <p className='text-[#737373]'><strong>Opponent ID:</strong> {battleMetadata.opponentId || "Waiting for opponent"}</p>
                <div className='flex justify-end gap-2 w-full mt-3'>
                  <button
                    onClick={declineBattle}
                    className='p-2 rounded bg-white-800/50 text-black shadow hover:bg-red-800/80 hover:text-white cursor-pointer duration-300'
                  >
                    Decline
                  </button>
                  <button onClick={acceptBattle} className='p-2 rounded bg-green-800/50 text-white hover:bg-green-800/80 cursor-pointer duration-300'>
                    Accept
                  </button>
                </div>
              </div>
            ) : (
              <div>Loading battle information...</div>
            )}
          </div>
        )}
        
        <ToastContainer />
      </div>
    </>
  );
};

export default Battle;
