json-server --watch db.json --port 3000


npm run dev -- --host 


<h2 className="text-xl font-bold mb-2">You are the {playerData.role}</h2>
<p className="mb-2"><strong>Your ID:</strong> {playerData.id}</p>
<p className="mb-2"><strong>Your Team:</strong></p>
<ul className="list-disc pl-6">
  {playerData.team?.map((pokemon, i) => (
    <li key={i}>{pokemon}</li>
  ))}
</ul>


<div className="bg-[#d9d9d9] h-2 rounded mt-2 w-full relative">
  <div className="bg-[#ffbd59] h-full rounded" style={{ width: `${value * 0.39}%` }}></div>
</div>




import React, { useEffect, useState } from 'react';
import Arena from '../../assets/images/arena.png';
import axios from 'axios';
const typeColor = {
  grass: "bg-green-400",
  fire: "bg-red-400",
  water: "bg-blue-400",
  electric: "bg-yellow-300",
  bug: "bg-lime-400",
  poison: "bg-purple-400",
  flying: "bg-indigo-300",
  ground: "bg-yellow-600",
  rock: "bg-gray-500",
  psychic: "bg-pink-400",
  ice: "bg-cyan-300",
  dragon: "bg-purple-600",
  dark: "bg-[#705746] text-white",
  steel: "bg-gray-400",
  fairy: "bg-pink-200",
  normal: "bg-[#A8A77A] ",
  fighting: "bg-[#C22E28]",
  ghost: "bg-[#735797]"
};

const BattleArena = ({ battle }) => {
  const [hostPokemon, setHostPokemon] = useState(null);
  const [opponentPokemon, setOpponentPokemon] = useState(null);
  const [roundResults, setRoundResults] = useState([]);

  useEffect(() => {
    if (!battle) return;

    const hostTeam = battle.hostPickedTeam || [];
    const opponentTeam = battle.opponentPickedTeam || [];

    const lastHost = hostTeam[hostTeam.length - 1]?.pokemonId;
    const lastOpponent = opponentTeam[opponentTeam.length - 1]?.pokemonId;

    if (lastHost) {
      axios.get(`https://pokeapi.co/api/v2/pokemon/${lastHost}`)
        .then(res => setHostPokemon(res.data))
        .catch(err => console.error('Host fetch error:', err));
    }

    if (lastOpponent) {
      axios.get(`https://pokeapi.co/api/v2/pokemon/${lastOpponent}`)
        .then(res => setOpponentPokemon(res.data))
        .catch(err => console.error('Opponent fetch error:', err));
    }
  }, [battle]);

  const renderPokemonCard = (pokemon, reverse = false) => {
    if (!pokemon) return <div className="text-center">Loading...</div>;

    const sprite = reverse
      ? pokemon.sprites?.back_default
      : pokemon.sprites?.front_default;

    return (
      <div className="p-2 rounded-xl sm:w-[390px] min-w-[250px]">
        <div className="platform pt-1 pb-2 relative">
          <img
            src={sprite}
            alt={pokemon.name}
            className="animate-bounce drop-shadow-[10px_0px_1px_rgba(0,0,0,0.5)] mx-auto sm:w-[200px] w-[150px]"
          />
        </div>

        <div className="border-[2px] border-blue-700 p-2 rounded-b-[5px] bg-amber-100">
          <div>
            <b>{pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</b>
            <p className="mt-1 flex gap-2 flex-wrap">
            {pokemon.types.map((typeObj, i) => (
              <span
                key={i}
                className={`px-2 py-[1px] text-white rounded text-[11px] ${
                  typeColor[typeObj.type.name] || "bg-gray-300"
                }`}
              >
                {typeObj.type.name}
              </span>
            ))}

            </p>
          </div>
          <br />
          <hr />
          <div className="flex flex-wrap gap-2 mt-2">
            <small><b>Hp:</b> {pokemon.stats[0].base_stat}</small>
            <small><b>Atk:</b> {pokemon.stats[1].base_stat}</small>
            <small><b>Def:</b> {pokemon.stats[2].base_stat}</small>
          </div>
        </div>
      </div>
    );
  };

  const updateRoundResults = (round) => {
    
    const oddRounds = round.filter((_, index) => index % 2 !== 0);
    
    
    const hostWins = oddRounds.filter(result => result === 1).length;
    const opponentWins = oddRounds.filter(result => result === 0).length;

    setRoundResults({ hostWins, opponentWins });
  };

  useEffect(() => {
    if (battle?.round) {
      updateRoundResults(battle.round);  
    }
  }, [battle]);

  return (
    <div className="sm:w-[70%] w-[100%] shadow-xl relative overflow-hidden bg-white -z-10">
      <img src={Arena} alt="" className="opacity-30 absolute w-full h-full object-cover -z-20" />

      <div className="flex px-5 shadow-sm rounded bg-white mt-1 p-2 justify-between">
        <span>
          <b className="text-[16px] sm:text-[18px] ">{battle.hostId}</b>
          <p>{roundResults.hostWins} - win</p> {/* Display host wins */}
        </span>
        <span className="text-center">
          {/* Rounds */}
        </span>
        <span className="flex flex-col text-end">
          <b className="text-[16px] sm:text-[18px]">{battle.opponentId}</b>
          <p>{roundResults.opponentWins} - win</p> 
        </span>
      </div>

      <div className="flex justify-end px-5">
        {renderPokemonCard(hostPokemon)}
      </div>

      <div className="text-center sm:text-4xl py-2 text-2xl text-black/60">
        <b>V.S</b>
      </div>

      <div className="flex justify-start px-5">
        {renderPokemonCard(opponentPokemon, true)}
      </div>
    </div>
  );
};

export default BattleArena;












//



import React, { useEffect, useState } from 'react';
import Arena from '../../assets/images/arena.png';
import axios from 'axios';

const BattleArena = ({ battle }) => {
  const [hostPokemon, setHostPokemon] = useState(null);
  const [opponentPokemon, setOpponentPokemon] = useState(null);

  useEffect(() => {
    if (!battle) return;

    const hostTeam = battle.hostPickedTeam || [];
    const opponentTeam = battle.opponentPickedTeam || [];

    const lastHost = hostTeam[hostTeam.length - 1]?.pokemonId;
    const lastOpponent = opponentTeam[opponentTeam.length - 1]?.pokemonId;

    if (lastHost) {
      axios.get(`https://pokeapi.co/api/v2/pokemon/${lastHost}`)
        .then(res => setHostPokemon(res.data))
        .catch(err => console.error('Host fetch error:', err));
    }

    if (lastOpponent) {
      axios.get(`https://pokeapi.co/api/v2/pokemon/${lastOpponent}`)
        .then(res => setOpponentPokemon(res.data))
        .catch(err => console.error('Opponent fetch error:', err));
    }
  }, [battle]);

  const renderPokemonCard = (pokemon, reverse = false) => {
    if (!pokemon) return <div className="text-center">Loading...</div>;

    const sprite = reverse
      ? pokemon.sprites?.back_default
      : pokemon.sprites?.front_default;

    return (
      <div className="p-2 rounded-xl sm:w-[390px] min-w-[250px]">
        <div className="platform pt-1 pb-2 relative">
          <img
            src={sprite}
            alt={pokemon.name}
            className="animate-bounce drop-shadow-[10px_0px_1px_rgba(0,0,0,0.5)] mx-auto sm:w-[200px] w-[150px]"
          />
        </div>

        <div className="border-[2px] border-blue-700 p-2 rounded-b-[5px] bg-amber-100">
          <div>
            <b>{pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</b>
            <p className="mt-1 flex gap-2 flex-wrap">
              {pokemon.types.map((typeObj, i) => (
                <span
                  key={i}
                  className={`px-2 py-[1px] rounded text-[11px] text-white bg-${typeObj.type.name}-600`}
                >
                  {typeObj.type.name}
                </span>
              ))}
            </p>
          </div>
          <br />
          <hr />
          <div className="flex flex-wrap gap-2 mt-2">
            <small><b>Hp:</b> {pokemon.stats[0].base_stat}</small>
            <small><b>Atk:</b> {pokemon.stats[1].base_stat}</small>
            <small><b>Def:</b> {pokemon.stats[2].base_stat}</small>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="sm:w-[70%] w-[100%] shadow-xl relative overflow-hidden bg-white -z-10">
      <img src={Arena} alt="" className="opacity-30 absolute w-full h-full object-cover -z-20" />

      <div className="flex px-5 shadow-sm rounded bg-white mt-1 p-2 justify-between">
        <span>
          <b className="text-[18px]">{battle.hostId}</b>
          <p>0 - win</p>
        </span>
        <span className="text-center">
          Final Round
        </span>
        <span className="flex flex-col text-end">
          <b className="text-[18px]">{battle.opponentId}</b>
          <p>0 - win</p>
        </span>
      </div>

      <div className="flex justify-end px-5">
        {renderPokemonCard(hostPokemon)}
      </div>

      <div className="text-center sm:text-4xl py-2 text-2xl text-black/60">
        <b>V.S</b>
      </div>

      <div className="flex justify-start px-5">
        {renderPokemonCard(opponentPokemon, true)}
      </div>
    </div>
  );
};

export default BattleArena;


//////////////////////////


import React, { useState, useEffect } from 'react';
import Axios from 'axios';

const typeColor = {
  grass: "bg-green-400",
  fire: "bg-red-400",
  water: "bg-blue-400",
  electric: "bg-yellow-300",
  bug: "bg-lime-400",
  poison: "bg-purple-400",
  flying: "bg-indigo-300",
  ground: "bg-yellow-600",
  rock: "bg-gray-500",
  psychic: "bg-pink-400",
  ice: "bg-cyan-300",
  dragon: "bg-purple-600",
  dark: "bg-[#705746] text-white",
  steel: "bg-gray-400",
  fairy: "bg-pink-200",
  normal: "bg-[#A8A77A]",
  fighting: "bg-[#C22E28]",
  ghost: "bg-[#735797]",
};

const MyTeam = ({ team, battleId, role }) => {
  const [pokemonStats, setPokemonStats] = useState([]);
  const [selectedId, setSelectedId] = useState(null);
  const [isSelectionDisabled, setIsSelectionDisabled] = useState(false);

  useEffect(() => {
    const fetchPokemonStats = async () => {
      try {
        const stats = await Promise.all(
          team.map(async (pokemonId) => {
            const res = await Axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`);
            return res.data;
          })
        );
        setPokemonStats(stats);
      } catch (err) {
        console.error("Error fetching Pokémon stats:", err);
      }
    };

    fetchPokemonStats();
  }, [team]);

  // Polling every 2 seconds to check if teams are full
  useEffect(() => {
    if (!selectedId) return; // Don't run interval if nothing is selected
  
    const interval = setInterval(async () => {
      try {
        const res = await Axios.get(`http://localhost:3000/battle/${battleId}`);
        const { hostTeam, opponentTeam } = res.data;
  
        if (hostTeam.length === opponentTeam.length && hostTeam.length >= 0) {
          window.location.reload();
        }
      } catch (err) {
        console.error("Error checking team status:", err);
      }
    }, 2000);
  
    return () => clearInterval(interval);
  }, [selectedId, battleId]);

  const handleSelect = async (pokemon) => {
    if (isSelectionDisabled) return;

    setSelectedId(pokemon.id);
    setIsSelectionDisabled(true);

    const selectedData = {
      pokemonId: pokemon.id,
      hp: pokemon.stats.find(stat => stat.stat.name === 'hp').base_stat,
      attack: pokemon.stats.find(stat => stat.stat.name === 'attack').base_stat,
      speed: pokemon.stats.find(stat => stat.stat.name === 'speed').base_stat
    };

    const roleField = role === 'Host' ? 'hostPickedTeam' : 'opponentPickedTeam';
    const teamFieldToRemoveFrom = role === 'Host' ? 'hostTeam' : 'opponentTeam';

    try {
      const res = await Axios.get(`http://localhost:3000/battle/${battleId}`);
      const battleData = res.data;

      const updatedTeam = (battleData[roleField] || []).concat(selectedData);
      const filteredTeam = (battleData[teamFieldToRemoveFrom] || []).filter(id => id !== pokemon.id);

      await Axios.patch(`http://localhost:3000/battle/${battleId}`, {
        [roleField]: updatedTeam,
        [teamFieldToRemoveFrom]: filteredTeam
      });
    } catch (err) {
      console.error("Error updating battle team:", err);
    }
  };

  return (
    <div className='w-full h-full absolute z-50'>
      <div className='pt-10 text-center text-2xl text-[#737373]'>
        <b>Choose a Pokemon</b>
      </div>
      <div className='grid w-full md:grid-cols-5 gap-3 grid-cols-2 p-5 place-item-center cursor-pointer'>
        {pokemonStats.map((pokemon) => (
          <div
            key={pokemon.id}
            onClick={() => handleSelect(pokemon)}
            className={`py-4 rounded-md hover:shadow-md border ${
              selectedId === pokemon.id ? 'border-red-500' : 'border-gray-700/40'
            } ease duration-200 bg-white p-2 ${isSelectionDisabled ? 'pointer-events-none opacity-50' : ''}`}
          >
            <div className='flex justify-center'>
              <img
                src={pokemon.sprites.front_default}
                alt={pokemon.name}
                className='lg:w-[150px] min-w-[150px]'
              />
            </div>
            <div className='text-center mb-2 flex justify-center items-center flex-col gap-2'>
              <b className="text-[20px]">{pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</b>
              <div className="p-1 rounded text-white">
                {pokemon.types.map(type => (
                  <span key={type.type.name} className={`${typeColor[type.type.name]} p-1 rounded mr-1`}>
                    {type.type.name}
                  </span>
                ))}
              </div>
            </div>
            <p>Hp: <b>{pokemon.stats.find(stat => stat.stat.name === 'hp').base_stat}</b></p>
            <div className="bg-[#d9d9d9] h-2 rounded mt-2 w-full relative">
              <div
                className="bg-[#ffbd59] h-full rounded"
                style={{ width: `${pokemon.stats.find(stat => stat.stat.name === 'hp').base_stat * 0.38}%` }}
              ></div>
            </div>
            <p>Attack: <b>{pokemon.stats.find(stat => stat.stat.name === 'attack').base_stat}</b></p>
            <div className="bg-[#d9d9d9] h-2 rounded mt-2 w-full relative">
              <div
                className="bg-[#ffbd59] h-full rounded"
                style={{ width: `${pokemon.stats.find(stat => stat.stat.name === 'attack').base_stat * 0.39}%` }}
              ></div>
            </div>
            <p>Speed: <b>{pokemon.stats.find(stat => stat.stat.name === 'speed').base_stat}</b></p>
            <div className="bg-[#d9d9d9] h-2 rounded mt-2 w-full relative">
              <div
                className="bg-[#ffbd59] h-full rounded"
                style={{ width: `${pokemon.stats.find(stat => stat.stat.name === 'speed').base_stat * 0.39}%` }}
              ></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MyTeam;


























///////////




















import React, { useState, useEffect } from 'react';
import Axios from 'axios';

const typeColor = {
  grass: "bg-green-400",
  fire: "bg-red-400",
  water: "bg-blue-400",
  electric: "bg-yellow-300",
  bug: "bg-lime-400",
  poison: "bg-purple-400",
  flying: "bg-indigo-300",
  ground: "bg-yellow-600",
  rock: "bg-gray-500",
  psychic: "bg-pink-400",
  ice: "bg-cyan-300",
  dragon: "bg-purple-600",
  dark: "bg-[#705746] text-white",
  steel: "bg-gray-400",
  fairy: "bg-pink-200",
  normal: "bg-[#A8A77A]",
  fighting: "bg-[#C22E28]",
  ghost: "bg-[#735797]",
};

const MyTeam = ({ team, battleId, role }) => {
  const [pokemonStats, setPokemonStats] = useState([]);
  const [selectedId, setSelectedId] = useState(null);
  const [isSelectionDisabled, setIsSelectionDisabled] = useState(false);

  useEffect(() => {
    const fetchPokemonStats = async () => {
      try {
        const stats = await Promise.all(
          team.map(async (pokemonId) => {
            const res = await Axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}`);
            return res.data;
          })
        );
        setPokemonStats(stats);
      } catch (err) {
        console.error("Error fetching Pokémon stats:", err);
      }
    };

    fetchPokemonStats();
  }, [team]);

  // Polling every 2 seconds to check if teams are full
  useEffect(() => {
    if (!selectedId) return;
  
    const interval = setInterval(async () => {
      try {
        const res = await Axios.get(`http://localhost:3000/battle/${battleId}`);
        const {
          hostTeam,
          opponentTeam,
          hostPickedTeam,
          opponentPickedTeam,
          round = []
        } = res.data;
  
        if (hostTeam.length === opponentTeam.length && hostTeam.length >= 0) {
          const hostPick = hostPickedTeam[hostPickedTeam.length - 1];
          const opponentPick = opponentPickedTeam[opponentPickedTeam.length - 1];
  
          if (hostPick && opponentPick) {
            let hostPoints = 0;
            let opponentPoints = 0;
  
            const stats = ['hp', 'attack', 'speed'];
            stats.forEach(stat => {
              if (hostPick[stat] > opponentPick[stat]) hostPoints++;
              else if (hostPick[stat] < opponentPick[stat]) opponentPoints++;
            });
  
            const newRound = [...round];
            if (hostPoints > opponentPoints) newRound.push(1);
            else if (hostPoints < opponentPoints) newRound.push(0);
           
  
            await Axios.patch(`http://localhost:3000/battle/${battleId}`, {
              hostRoundPoints: hostPoints,
              opponentRoundPoints: opponentPoints,
              round: newRound
            });
  
            //console.log(`Round Result -> Host: ${hostPoints}, Opponent: ${opponentPoints}`);
          }
  
          window.location.reload();
        }
      } catch (err) {
        console.error("Error checking team status or scoring:", err);
      }
    }, 2000);
  
    return () => clearInterval(interval);
  }, [selectedId, battleId]);
  

  const handleSelect = async (pokemon) => {
    if (isSelectionDisabled) return;

    setSelectedId(pokemon.id);
    setIsSelectionDisabled(true);

    const selectedData = {
      pokemonId: pokemon.id,
      hp: pokemon.stats.find(stat => stat.stat.name === 'hp').base_stat,
      attack: pokemon.stats.find(stat => stat.stat.name === 'attack').base_stat,
      speed: pokemon.stats.find(stat => stat.stat.name === 'speed').base_stat
    };

    const roleField = role === 'Host' ? 'hostPickedTeam' : 'opponentPickedTeam';
    const teamFieldToRemoveFrom = role === 'Host' ? 'hostTeam' : 'opponentTeam';

    try {
      const res = await Axios.get(`http://localhost:3000/battle/${battleId}`);
      const battleData = res.data;

      const updatedTeam = (battleData[roleField] || []).concat(selectedData);
      const filteredTeam = (battleData[teamFieldToRemoveFrom] || []).filter(id => id !== pokemon.id);

      await Axios.patch(`http://localhost:3000/battle/${battleId}`, {
        [roleField]: updatedTeam,
        [teamFieldToRemoveFrom]: filteredTeam
      });
    } catch (err) {
      console.error("Error updating battle team:", err);
    }
  };

  return (
    <div className='w-full h-full absolute z-50'>
      <div className='pt-10 text-center text-2xl text-[#737373]'>
        <b>Choose a Pokemon</b>
      </div>
      <div className='grid w-full md:grid-cols-5 gap-3 grid-cols-2 p-5 place-item-center cursor-pointer'>
        {pokemonStats.map((pokemon) => (
          <div
            key={pokemon.id}
            onClick={() => handleSelect(pokemon)}
            className={`py-4 rounded-md hover:shadow-md border ${
              selectedId === pokemon.id ? 'border-red-500' : 'border-gray-700/40'
            } ease duration-200 bg-white p-2 ${isSelectionDisabled ? 'pointer-events-none opacity-50' : ''}`}
          >
            <div className='flex justify-center'>
              <img
                src={pokemon.sprites.front_default}
                alt={pokemon.name}
                className='lg:w-[150px] min-w-[150px]'
              />
            </div>
            <div className='text-center mb-2 flex justify-center items-center flex-col gap-2'>
              <b className="text-[20px]">{pokemon.name.charAt(0).toUpperCase() + pokemon.name.slice(1)}</b>
              <div className="p-1 rounded text-white">
                {pokemon.types.map(type => (
                  <span key={type.type.name} className={`${typeColor[type.type.name]} p-1 rounded mr-1`}>
                    {type.type.name}
                  </span>
                ))}
              </div>
            </div>
            <p>Hp: <b>{pokemon.stats.find(stat => stat.stat.name === 'hp').base_stat}</b></p>
            <div className="bg-[#d9d9d9] h-2 rounded mt-2 w-full relative">
              <div
                className="bg-[#ffbd59] h-full rounded"
                style={{ width: `${pokemon.stats.find(stat => stat.stat.name === 'hp').base_stat * 0.38}%` }}
              ></div>
            </div>
            <p>Attack: <b>{pokemon.stats.find(stat => stat.stat.name === 'attack').base_stat}</b></p>
            <div className="bg-[#d9d9d9] h-2 rounded mt-2 w-full relative">
              <div
                className="bg-[#ffbd59] h-full rounded"
                style={{ width: `${pokemon.stats.find(stat => stat.stat.name === 'attack').base_stat * 0.39}%` }}
              ></div>
            </div>
            <p>Speed: <b>{pokemon.stats.find(stat => stat.stat.name === 'speed').base_stat}</b></p>
            <div className="bg-[#d9d9d9] h-2 rounded mt-2 w-full relative">
              <div
                className="bg-[#ffbd59] h-full rounded"
                style={{ width: `${pokemon.stats.find(stat => stat.stat.name === 'speed').base_stat * 0.39}%` }}
              ></div>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

export default MyTeam;
